// Package krakenspot is a comprehensive toolkit for interfacing with the Kraken
// Spot Exchange API. It enables WebSocket and REST API interactions, including
// subscription to both public and private channels. The package provides a
// client for initiating these interactions and a state manager for handling
// them.
//
// The batchorder.go file provides the BatchOrder struct and associated methods
// for handling batch orders in the Kraken Spot Trading API. This file is
// specifically used for the authenticated AddOrderBatch method from the
// private-api.go file.
package krakenspot

type BatchOrder struct {
	UserRef       int32  `json:"userref,omitempty"`
	OrderType     string `json:"ordertype"` // Enum: "market", "limit", "stop-loss", "take-profit", "stop-loss-limit", "take-profit-limit", "settle-position"
	Direction     string `json:"type"`      // Enum: "buy", "sell"
	Volume        string `json:"volume"`    // Enum 'volume': >= 0. Note: 'volume' may be 0 for closing margin orders to automatically fill the requisite quantity.
	DisplayVolume string `json:"displayvol,omitempty"`
	Price         string `json:"price,omitempty"`
	Price2        string `json:"price2,omitempty"`
	Trigger       string `json:"trigger,omitempty"`
	Leverage      string `json:"leverage,omitempty"`
	ReduceOnly    bool   `json:"reduce_only,omitempty"`
	STPType       string `json:"stptype,omitempty"`
	OrderFlags    string `json:"oflags,omitempty"`
	TimeInForce   string `json:"timeinforce,omitempty"`
	StartTime     string `json:"starttm,omitempty"`
	ExpireTime    string `json:"expiretm,omitempty"`
}

// Constructor function to create new BatchOrder with required fields. Depending
// on value passed to arg 'orderType', Price and Price2 may also be required.
// Call with methods SetPrice() and SetPrice2() as necessary
//
// Enum 'orderType': "market", "limit", "stop-loss", "take-profit",
// "stop-loss-limit", "take-profit-limit", "settle-position"
//
// Enum 'direction': "buy", "sell"
//
// Enum 'volume': >= 0. Note: 'volume' may be 0 for closing margin orders to
// automatically fill the requisite quantity.
func NewBatchOrder(orderType, direction, volume string) *BatchOrder {
	return &BatchOrder{
		OrderType: orderType,
		Direction: direction,
		Volume:    volume,
	}
}

// User reference id userref is an optional user-specified integer id that can
// be associated with any number of orders. Many clients choose a userref
// corresponding to a unique integer id generated by their systems (e.g. a
// timestamp). However, because we don't enforce uniqueness on our side, it can
// also be used to easily group orders by pair, side, strategy, etc. This allows
// clients to more readily cancel or query information about orders in a
// particular group, with fewer API calls by using userref instead of our txid,
// where supported.
func (bo *BatchOrder) SetUserRef(userRef int32) *BatchOrder {
	bo.UserRef = userRef
	return bo
}

// Used to create a iceberg orders, this is the visible order quantity in terms
// of the base asset. The rest of the order will be hidden, although the full
// volume can be filled at any time by any order of that size or larger that
// matches in the order book. displayvol can only be used with the limit order
// type, must be greater than 0, and less than volume.
func (bo *BatchOrder) SetDisplayVolume(displayVolume string) *BatchOrder {
	bo.DisplayVolume = displayVolume
	return bo
}

// Price:
//
// Limit price for limit orders or trigger price for stop-loss, stop-loss-limit,
// take-profit, and take-profit-limit orders
//
// Notes:
//
// Relative Prices: Either price or price2 can be preceded by +, -, or # to
// specify the order price as an offset relative to the last traded price. +
// adds the amount to, and - subtracts the amount from the last traded price. #
// will either add or subtract the amount to the last traded price, depending on
// the direction and order type used. Prices can also be suffixed with a % to
// signify the relative amount as a percentage, rather than an absolute price
// difference.
func (bo *BatchOrder) SetPrice(price string) *BatchOrder {
	bo.Price = price
	return bo
}

// Limit price for stop-loss-limit and take-profit-limit
//
// Notes:
//
// Relative Prices: Either price or price2 can be preceded by +, -, or # to
// specify the order price as an offset relative to the last traded price. +
// adds the amount to, and - subtracts the amount from the last traded price. #
// will either add or subtract the amount to the last traded price, depending on
// the direction and order type used. Prices can also be suffixed with a % to
// signify the relative amount as a percentage, rather than an absolute price
// difference.
func (bo *BatchOrder) SetPrice2(price2 string) *BatchOrder {
	bo.Price2 = price2
	return bo
}

// Price signal used to trigger stop-loss, stop-loss-limit, take-profit, and
// take-profit-limit orders
//
// Note: To keep triggers serviceable, the last price will be used as fallback
// reference price during connectivity issues with external index feeds.
func (bo *BatchOrder) SetTrigger(trigger string) *BatchOrder {
	bo.Trigger = trigger
	return bo
}

// Amount of leverage desired (default: none)
func (bo *BatchOrder) SetLeverage(leverage string) *BatchOrder {
	bo.Leverage = leverage
	return bo
}

// If true, order will only reduce a currently open position, not increase it or
// open a new position. Can only be used with leveraged positions
func (bo *BatchOrder) SetReduceOnly(reduceOnly bool) *BatchOrder {
	bo.ReduceOnly = reduceOnly
	return bo
}

// Sets self trade prevention behaviour, defaults to "cancel-newest" if not called/
//
// Enum: "cancel-newest", "cancel-oldest", "cancel-both"
func (bo *BatchOrder) SetSTPType(stpType string) *BatchOrder {
	bo.STPType = stpType
	return bo
}

// Comma delimited list of order flags. If multiple flags are desired, method
// must only be called once and flags put in a single comma delimited string.
//
// Enum: "post", "fcib", "fciq", "nompp", "viqc"
func (bo *BatchOrder) SetOrderFlags(orderFlags string) *BatchOrder {
	bo.OrderFlags = orderFlags
	return bo
}

// Time-in-force of the order to specify how long it should remain in the order
// book before being cancelled. GTC (Good-'til-cancelled) is default if the
// parameter is omitted. IOC (immediate-or-cancel) will immediately execute the
// amount possible and cancel any remaining balance rather than resting in the book.
// "GTD" (good-'til-date), if specified, must be called with SetExpireTime() method.
//
// Enum: "GTC", "IOC", "GTD"
func (bo *BatchOrder) SetTimeInForce(timeInForce string) *BatchOrder {
	bo.TimeInForce = timeInForce
	return bo
}

// Scheduled start time, can be specified as an absolute timestamp or as a number
// of seconds in the future:
//
// 0 now (default)
//
// +<n> schedule start time seconds from now
//
// <n> = unix timestamp of start time
func (bo *BatchOrder) SetStartTime(startTime string) *BatchOrder {
	bo.StartTime = startTime
	return bo
}

// Expiration time:
//
// 0 no expiration (default)
//
// +<n> = expire seconds from now, minimum 5 seconds
//
// <n> = unix timestamp of expiration time
func (bo *BatchOrder) SetExpireTime(expireTime string) *BatchOrder {
	bo.ExpireTime = expireTime
	return bo
}
